// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/fuyx123/common-package/nacos"
	"log"
	"time"
)

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// 获取客户端实例
	client, err := nacos.GetNacosClient("/Users/fuyx/GolandProjects/common-package/application.yaml")
	if err != nil {
		log.Fatalf("初始化客户端失败: %v", err)
	}
	defer client.Close()

	// 获取配置
	config, err := client.GetConfig(ctx, "hxzPlayCar-gateway", "DEFAULT_GROUP")
	if err != nil {
		log.Printf("获取配置失败: %v", err)
		return
	}
	fmt.Printf("配置内容: %s\n", config)

	// 项目初始化的时候，初始化nacos配置
	// 初始化配置（通过nacos官方提供的结构体进行赋值，这里基本只用赋值命名空间ID即可）
	//clientConfig := constant.ClientConfig{
	//	NamespaceId:         "a5d5658f-d4c2-4975-ad9e-5e5d86c3c33c", //we can create multiple clients with different namespaceId to support multiple namespace.When namespace is public, fill in the blank string here.
	//	TimeoutMs:           5000,
	//	NotLoadCacheAtStart: true,
	//	LogDir:              "/tmp/nacos/log",
	//	CacheDir:            "/tmp/nacos/cache",
	//	LogLevel:            "debug",
	//}
	//// 创建nacos的连接（先通过nacos官方提供的结构体进行赋值）
	//serverConfigs := []constant.ServerConfig{
	//	{
	//		IpAddr:      "117.72.34.67",
	//		ContextPath: "/nacos",
	//		Port:        8848,
	//		Scheme:      "http",
	//	},
	//}
	//// 通过New来实例化nacos
	//configClient, err := clients.NewConfigClient(
	//	vo.NacosClientParam{
	//		ClientConfig:  &clientConfig,
	//		ServerConfigs: serverConfigs,
	//	},
	//)
	//
	//// 从naocs里面获取配置
	//content, err := configClient.GetConfig(vo.ConfigParam{
	//	DataId: "hxzPlayCar-gateway",
	//	Group:  "DEFAULT_GROUP"})
	//fmt.Println("获取配置::::", content)
	// json转译成结构体

}
